;===============================================
; Validator.art
;
; String validation library
; for Arturo
;
; MIT License
; (c) 2024 Yanis Zafirópulos
;==========================================================
; (Strong) Password validation
;
; @file: src/validators/password.art
;==========================================================

define :passwordValidator is :validator [

    ;------------------
    ; built-in data
    ;------------------

    specialChars: "!@#$%^&*()_+-=[]{}|;:,.<>?"

    ;------------------
    ; parameters
    ;------------------

    params: #[
        min:     @[:integer, 8]       ; minimum length
        max:     @[:integer, 128]     ; maximum length
        lower:   @[:integer, 1]       ; minimum lowercase chars
        upper:   @[:integer, 1]       ; minimum uppercase chars
        num:     @[:integer, 1]       ; minimum numeric chars
        special: @[:integer, 1]       ; minimum special chars
        spaces:  @[:logical, false]   ; allow spaces
        unicode: @[:logical, false]   ; allow unicode
    ]

    ;------------------
    ; methods
    ;------------------

    action: method [str, opts][
        ; Check length bounds
        len: size str
        if len < opts\min -> return false
        if len > opts\max -> return false

        ; Check for disallowed characters
        if and? [not? opts\spaces][contains? str " "] -> return false
        if and? [not? opts\unicode][not? ascii? str]  -> return false

        ; Count character types
        lowerCount: size match str {/[a-z]/}
        upperCount: size match str {/[A-Z]/}
        numCount:   size match str {/[0-9]/}
        specialCount: size match str to :regex ~{[|escape.regex \specialChars|]}

        ; Check minimum requirements - only when they're greater than 0
        if and? [0 < opts\lower][lowerCount < opts\lower] -> return false
        if and? [0 < opts\upper][upperCount < opts\upper] -> return false
        if and? [0 < opts\num][numCount < opts\num] -> return false
        if and? [0 < opts\special][specialCount < opts\special] -> return false

        return true
    ]

    test: method [][
        #[
            valid: [
                ; Basic valid passwords
                "Abcd123!@#"
                "Password123!"
                "Str0ng!Pass"
                "C0mpl3x!@#$"
                "ABcdEF6#"
                
                ; Edge cases that should pass
                ["Password123!",   [min: 8]]
                ["Ab1!defgh",      [special: 1]]
                ["Ab1!=xxxxxxx",   [max: 28]]           ; long but valid
                ["Ab1! xyz!",      [spaces: true]]      ; with spaces
                ["Ab1!münich",     [unicode: true]]     ; with unicode
                
                ; Modified requirements
                ["ab1!",           [upper: 0, min: 4]]  ; no uppercase required
                ["AB1!",           [lower: 0, min: 4]]  ; no lowercase required
                ["ABCabc!",        [num: 0, min: 7]]    ; no numbers required
                ["ABCabc123",      [special: 0]]        ; no special chars required

                ; Multiple special characters
                "P@ssw#rd123!"
                
                ; Maximum combinations
                ["Ab1!@#$%^&",     [special: 5]]        ; multiple special chars required
                ["AABBCc123!",     [upper: 4]]          ; multiple uppercase required
                ["aabbCC123!",     [lower: 4]]          ; multiple lowercase required
                ["AbC!12345",      [num: 5]]            ; multiple numbers required
                
                ; Mixed modifications
                ["Ab123456",       [special: 0, min: 8]]            ; no special, but longer
                ["ABCDEF12!",      [lower: 0, num: 2]]             ; no lowercase, more numbers
                ["Aa1!@#$ xyz",    [spaces: true, special: 4]]     ; spaces and more special
            ]

            invalid: [
                ; Too short
                ""
                "Aa1!"
                
                ; Missing required characters
                "abcd1234!@"      ; no uppercase
                "ABCD1234!@"      ; no lowercase
                "ABCDabcd!@"      ; no numbers
                "ABCDabcd123"     ; no special chars
                
                ; Space/Unicode violations
                ["Pass word1!",    [spaces: false]]     ; contains space
                ["Pass münich!",   [unicode: false]]    ; contains unicode
                
                ; Not meeting minimums
                ["Aa1!",          [min: 8]]            ; too short for min:8
                ["Aa1!bcde",      [upper: 2]]          ; not enough uppercase
                ["Aa1!bcdE",      [lower: 5]]          ; not enough lowercase
                ["Aa1!bcde",      [num: 3]]            ; not enough numbers
                ["Aa1!bcde",      [special: 2]]        ; not enough special chars

                ; Complex requirement failures
                ["Ab1!@",           [min: 10]]                      ; too short for custom min
                ["Ab1!abcdefghijk", [max: 10]]                      ; too long for custom max
                ["AAb1!cde",        [lower: 6]]                     ; not enough lowercase
                ["aab1!CD",         [upper: 3]]                     ; not enough uppercase
                ["Aa!bcd",          [num: 3]]                       ; not enough numbers
                ["Ab1cdef",         [special: 3]]                   ; not enough special chars
                ["Ab1!@x y",        [spaces: false, special: 3]]    ; spaces not allowed & not enough special
                ["Ab1!@αβ",         [unicode: false, special: 3]]   ; unicode not allowed & not enough special
                
                ; Combined requirement failures
                ["Ab1!",          [min: 8, upper: 2]]            ; multiple failures
                ["abcd123!",      [upper: 2, special: 2]]        ; multiple failures
                ["ABCD123!",      [lower: 2, special: 2]]        ; multiple failures
                ["Aa!cdef",       [num: 2, special: 2]]          ; multiple failures
            ]
        ]
    ]
]