;===============================================
; Validator.art
;
; String validation library
; for Arturo
;
; MIT License
; (c) 2024 Yanis Zafir√≥pulos
;==========================================================
; Credit card validation
;
; @file: src/validators/card.art
;==========================================================

define :cardValidator is :validator [

    ;------------------
    ; built-in data
    ;------------------

    ; for the regexes, see:
    ; https://github.com/validatorjs/validator.js/blob/master/src/lib/isCreditCard.js

    emitters: #[
        amex:       {/^3[47][0-9]{13}$/}
        diners:     {/^3(?:0[0-5]|[68][0-9])[0-9]{11}$/}
        discover:   {/^6(?:011|5[0-9][0-9])[0-9]{12,15}$/}
        jcb:        {/^(?:2131|1800|35\d{3})\d{11}$/}
        mastercard: {/^5[1-5][0-9]{2}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$/}
        union:      {/^(6[27][0-9]{14}|^(81[0-9]{14,17}))$/}
        visa:       {/^(?:4[0-9]{12})(?:[0-9]{3,6})?$/}
    ]

    ;------------------
    ; helpers
    ;------------------

    luhn?: function [n][
        ; see:
        ; https://en.wikipedia.org/wiki/Luhn_algorithm
        s: 0
        ds: digits n
        parity: (size ds) % 2
        loop.with:'i chop ds 'd [
            switch parity <> i % 2 [
                s: s + d
            ][
                switch d > 4 [
                    s: s + (2 * d) - 9
                ][
                    s: s + 2 * d
                ]
            ]
        ]
        return (last ds) = (10 - s % 10) % 10
    ]

    ;------------------
    ; methods
    ;------------------

    action: method [str, opts][
        sanitized: join split replace str {/[\s]+/} ""

        unless some? values \emitters 'rx [
            match? sanitized rx
        ] -> return false

        return \luhn? to :integer sanitized
    ]

    test: method [][
        #[
            valid: [
                "378282246310005"       ; American Express
                "371449635398431"
                "378734493671000"
                "3787 3449 3671 000"

                "30569309025904"        ; Diners Club
                "38520000023237"
                "385 200 000 232 37"    

                "6011111111111117"      ; Discover
                "6011000990139424"
                "6011 0009 9013 9424"

                "3530111333300000"      ; JCB
                "3566002020360505"
                "3566 0020 2036 0505"

                "5555555555554444"      ; Mastercard
                "5105105105105100"
                "5105 1051 0510 5100"

                "4111111111111111"      ; Visa
                "4012888888881881"      
                "4012 8888 8888 1881"
                "4222222222222"
            ]

            invalid: [ 
                ""
                "&*@^#*&@^#"
                "3782822463100051"
                "371449635398432"
                "378734493671005"
                "3787 3449 3671 900"
                "30569309025903"
                "38520000023231"
                "385 200 000 202 37"    
                "60111111111111X7"
                "6011000990139424Y"
                "6011 0009 9013 9324"
                "3530111333300880"
                "3566002020360555"
                "3566 0020 2036 2505"
                "5555555555554447"
                "5105105105105108"
                "5105 1051 0510 9100"
                "41111111111111110" 
                "40128888888818810"      
                "4012 8888 8888 18081"
                "42222222222220"
            ]
        ]
    ]
    
]
