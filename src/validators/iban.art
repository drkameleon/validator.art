;===============================================
; Validator.art
;
; String validation library
; for Arturo
;
; MIT License
; (c) 2024 Yanis ZafirÃ³pulos
;==========================================================
; IBAN validation
;
; based on:
; https://en.wikipedia.org/wiki/International_Bank_Account_Number
;
; @file: src/validators/iban.art
;==========================================================

define :ibanValidator is :validator [

    ;------------------
    ; built-in data
    ;------------------

    ; for the regexes, see:
    ; https://github.com/validatorjs/validator.js/blob/master/src/lib/isIBAN.js

    countries: #[
        AD: {/^(AD[0-9]{2})\d{8}[A-Z0-9]{12}$/}
        AE: {/^(AE[0-9]{2})\d{3}\d{16}$/}
        AL: {/^(AL[0-9]{2})\d{8}[A-Z0-9]{16}$/}
        AT: {/^(AT[0-9]{2})\d{16}$/}
        AZ: {/^(AZ[0-9]{2})[A-Z0-9]{4}\d{20}$/}
        BA: {/^(BA[0-9]{2})\d{16}$/}
        BE: {/^(BE[0-9]{2})\d{12}$/}
        BG: {/^(BG[0-9]{2})[A-Z]{4}\d{6}[A-Z0-9]{8}$/}
        BH: {/^(BH[0-9]{2})[A-Z]{4}[A-Z0-9]{14}$/}
        BR: {/^(BR[0-9]{2})\d{23}[A-Z]{1}[A-Z0-9]{1}$/}
        BY: {/^(BY[0-9]{2})[A-Z0-9]{4}[A-Z0-9]{20}$/}
        CH: {/^(CH[0-9]{2})\d{5}[A-Z0-9]{12}$/}
        CR: {/^(CR[0-9]{2})\d{18}$/}
        CY: {/^(CY[0-9]{2})\d{8}[A-Z0-9]{16}$/}
        CZ: {/^(CZ[0-9]{2})\d{20}$/}
        DE: {/^(DE[0-9]{2})\d{18}$/}
        DK: {/^(DK[0-9]{2})\d{14}$/}
        DO: {/^(DO[0-9]{2})[A-Z]{4}\d{20}$/}
        DZ: {/^(DZ\d{24})$/}
        EE: {/^(EE[0-9]{2})\d{16}$/}
        EG: {/^(EG[0-9]{2})\d{25}$/}
        ES: {/^(ES[0-9]{2})\d{20}$/}
        FI: {/^(FI[0-9]{2})\d{14}$/}
        FO: {/^(FO[0-9]{2})\d{14}$/}
        FR: {/^(FR[0-9]{2})\d{10}[A-Z0-9]{11}\d{2}$/}
        GB: {/^(GB[0-9]{2})[A-Z]{4}\d{14}$/}
        GE: {/^(GE[0-9]{2})[A-Z0-9]{2}\d{16}$/}
        GI: {/^(GI[0-9]{2})[A-Z]{4}[A-Z0-9]{15}$/}
        GL: {/^(GL[0-9]{2})\d{14}$/}
        GR: {/^(GR[0-9]{2})\d{7}[A-Z0-9]{16}$/}
        GT: {/^(GT[0-9]{2})[A-Z0-9]{4}[A-Z0-9]{20}$/}
        HR: {/^(HR[0-9]{2})\d{17}$/}
        HU: {/^(HU[0-9]{2})\d{24}$/}
        IE: {/^(IE[0-9]{2})[A-Z0-9]{4}\d{14}$/}
        IL: {/^(IL[0-9]{2})\d{19}$/}
        IQ: {/^(IQ[0-9]{2})[A-Z]{4}\d{15}$/}
        IR: {/^(IR[0-9]{2})0\d{2}0\d{18}$/}
        IS: {/^(IS[0-9]{2})\d{22}$/}
        IT: {/^(IT[0-9]{2})[A-Z]{1}\d{10}[A-Z0-9]{12}$/}
        JO: {/^(JO[0-9]{2})[A-Z]{4}\d{22}$/}
        KW: {/^(KW[0-9]{2})[A-Z]{4}[A-Z0-9]{22}$/}
        KZ: {/^(KZ[0-9]{2})\d{3}[A-Z0-9]{13}$/}
        LB: {/^(LB[0-9]{2})\d{4}[A-Z0-9]{20}$/}
        LC: {/^(LC[0-9]{2})[A-Z]{4}[A-Z0-9]{24}$/}
        LI: {/^(LI[0-9]{2})\d{5}[A-Z0-9]{12}$/}
        LT: {/^(LT[0-9]{2})\d{16}$/}
        LU: {/^(LU[0-9]{2})\d{3}[A-Z0-9]{13}$/}
        LV: {/^(LV[0-9]{2})[A-Z]{4}[A-Z0-9]{13}$/}
        LY: {/^(LY[0-9]{2})[A-Z0-9]{21}$/}
        MA: {/^(MA[0-9]{26})$/}
        MC: {/^(MC[0-9]{2})\d{10}[A-Z0-9]{11}\d{2}$/}
        MD: {/^(MD[0-9]{2})[A-Z0-9]{20}$/}
        ME: {/^(ME[0-9]{2})\d{18}$/}
        MK: {/^(MK[0-9]{2})\d{3}[A-Z0-9]{10}\d{2}$/}
        MR: {/^(MR[0-9]{2})\d{23}$/}
        MT: {/^(MT[0-9]{2})[A-Z]{4}\d{5}[A-Z0-9]{18}$/}
        MU: {/^(MU[0-9]{2})[A-Z]{4}\d{19}[A-Z]{3}$/}
        MZ: {/^(MZ[0-9]{2})\d{21}$/}
        NL: {/^(NL[0-9]{2})[A-Z]{4}\d{10}$/}
        NO: {/^(NO[0-9]{2})\d{11}$/}
        OM: {/^(OM[0-9]{2})\d{19}$/}
        PK: {/^(PK[0-9]{2})[A-Z0-9]{4}\d{16}$/}
        PL: {/^(PL[0-9]{2})\d{24}$/}
        PS: {/^(PS[0-9]{2})[A-Z0-9]{4}\d{21}$/}
        PT: {/^(PT[0-9]{2})\d{21}$/}
        QA: {/^(QA[0-9]{2})[A-Z]{4}[A-Z0-9]{21}$/}
        RO: {/^(RO[0-9]{2})[A-Z]{4}[A-Z0-9]{16}$/}
        RS: {/^(RS[0-9]{2})\d{18}$/}
        SA: {/^(SA[0-9]{2})\d{2}[A-Z0-9]{18}$/}
        SC: {/^(SC[0-9]{2})[A-Z]{4}\d{20}[A-Z]{3}$/}
        SE: {/^(SE[0-9]{2})\d{20}$/}
        SI: {/^(SI[0-9]{2})\d{15}$/}
        SK: {/^(SK[0-9]{2})\d{20}$/}
        SM: {/^(SM[0-9]{2})[A-Z]{1}\d{10}[A-Z0-9]{12}$/}
        SV: {/^(SV[0-9]{2})[A-Z0-9]{4}\d{20}$/}
        TL: {/^(TL[0-9]{2})\d{19}$/}
        TN: {/^(TN[0-9]{2})\d{20}$/}
        TR: {/^(TR[0-9]{2})\d{5}[A-Z0-9]{17}$/}
        UA: {/^(UA[0-9]{2})\d{6}[A-Z0-9]{19}$/}
        VA: {/^(VA[0-9]{2})\d{18}$/}
        VG: {/^(VG[0-9]{2})[A-Z]{4}\d{16}$/}
        XK: {/^(XK[0-9]{2})\d{16}$/}
    ]

    ; for use in the checksum validation

    base36: #.raw flatten couple 
            (map 0..9 'x -> to :string x) ++ 
             map 97..122 'x -> upper to :string to :char x
        @0..35

    ;------------------
    ; helpers
    ;------------------

    validateStructure: method [iban, country][
        match? iban \countries\[country]
    ]

    validateChecksum: method [iban][
        ; Move first 4 chars to end and convert to numeric values
        rearranged: (slice iban 4 (size iban)-1) ++ slice iban 0 3

        ; Convert letters to numbers (A=10, B=11, etc)
        numeric: join map split rearranged 'ch -> 
            to :string \base36\[ch]

        ; Check if mod 97 equals 1
        return one? (to :integer numeric) % 97
    ]

    ;------------------
    ; methods
    ;------------------

    action: method [str, opts][
        ; Input validation
        if empty? str -> return false

        ; Sanitize input
        iban: upper join split replace str {/[\s-]+/} ""
        
        ; Basic length check (min 15, max 34)
        unless between? size iban 15 34 -> 
            return false

        ; Extract and validate country code
        countryCode: first.n:2 iban
        unless key? \countries countryCode ->
            return false

        ; Validate structure against country pattern
        unless \validateStructure iban countryCode ->
            return false

        ; Validate checksum
        return \validateChecksum iban
    ]

    test: method [][
        #[
            valid: [
                "GB33BUKB20201555555555"
                "GB94BARC10201530093459"
                "GB82 WEST 1234 5698 7654 32"
                "DE75512108001245126199"

                "AD1200012030200359100100"
                "AE070331234567890123456"
                "AL47212110090000000235698741"
                "AT611904300234573201"
                "AZ21NABZ00000000137010001944"
                "BA391290079401028494"
                "BE68539007547034"
                "BG80BNBG96611020345678"
                "BH67BMAG00001299123456"
                "BR1800360305000010009795493C1"
                "BY13NBRB3600900000002Z00AB00"
                "CH9300762011623852957"
                "CR05015202001026284066"
                "CY17002001280000001200527600"
                "CZ6508000000192000145399"
                "DE89370400440532013000"
                "DK5000400440116243"
                "DO28BAGR00000001212453611324"
                "EE382200221020145685"
                "EG380019000500000000263180002"
                "ES9121000418450200051332"
                "FI2112345600000785"
                "FO6264600001631634"
                "FR1420041010050500013M02606"
                "GB29NWBK60161331926819"
                "GE29NB0000000101904917"
                "GI75NWBK000000007099453"
                "GL8964710001000206"
                "GR1601101250000000012300695"
                "GT82TRAJ01020000001210029690"
                "HR1210010051863000160"
                "HU42117730161111101800000000"
                "IE29AIBK93115212345678"
                "IL620108000000099999999"
                "IQ98NBIQ850123456789012"
                "IS140159260076545510730339"
                "IT60X0542811101000000123456"
                "JO94CBJO0010000000000131000302"
                "KW81CBKU0000000000001234560101"
                "KZ86125KZT5004100100"
                "LB62099900000001001901229114"
                "LC55HEMM000100010012001200023015"
                "LI21088100002324013AA"
                "LT121000011101001000"
                "LU280019400644750000"
                "LV80BANK0000435195001"
                "LY83002048000020100120361"
                "MC5811222000010123456789030"
                "MD24AG000225100013104168"
                "ME25505000012345678951"
                "MK07250120000058984"
                "MR1300020001010000123456753"
                "MT84MALT011000012345MTLCAST001S"
                "MU17BOMM0101101030300200000MUR"
                "NL91ABNA0417164300"
                "NO9386011117947"
                "OM810180000001299123456"
                "PK36SCBL0000001123456702"
                "PL61109010140000071219812874"
                "PS92PALS000000000400123456702"
                "PT50000201231234567890154"
                "QA58DOHB00001234567890ABCDEFG"
                "RO49AAAA1B31007593840000"
                "RS35260005601001611379"
                "SA0380000000608010167519"
                "SC18SSCB11010000000000001497USD"
                "SE4550000000058398257466"
                "SI56263300012039086"
                "SK3112000000198742637541"
                "SM86U0322509800000000270100"
                "SV62CENR00000000000000700025"
                "TL380080012345678910157"
                "TN5910006035183598478831"
                "TR330006100519786457841326"
                "UA213223130000026007233566001"
                "VA59001123000012345678"
                "VG96VPVG0000012345678901"
                "XK051212012345678906"
            ]

            invalid: [ 
                ""                              ; empty
                "JKFDS*&^F&*DSF"                ; gibberish
                "US64SVBKUS6S3300958879"        ; unsupported country
                "DR75512108001245126199"        ; unrecognized country
                "GB12BARC20201530093A59"        ; invalid structure
                "GB96BARC2020153009345"         ; shorter
                "DE755121080012451261"          ; shorter
                "GB96BARC202015300934591"       ; longer
                "DE755121080012451261991"       ; longer
                "DE75512108001245126191"        ; invalid checksum

                "AD1200012030200359100120"
                "AT611904300234573221"
                "BA39129007940028494"
                "BE685390047034"
                "VG611904300234573201"
                "ST68000200010192194210112"
                "MCBKCWCU25727002"

                "ZZ89 3704 0044 0532 0130 00"
                "DE89 3704 0044 0530 7877 089"
                "DE89 3704 0044 053A 013B 00"
                "DE90 3704 0044 0532 0130 00"

                "CH4550050201124153987"
                "CH45 5005 0201 1241 5398 7"
            ]
        ]
    ]
    
]