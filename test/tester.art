import {unitt}!
import ./"../src/validator.art"!

subHeader: function [hdr][
    "\n" ++
    (color.bold #green  "-------------------------------------\n") ++
    (color.bold #green "  " ++ hdr ++ "\n") ++
    (color.bold #green "-------------------------------------\n")
]

print subHeader "Misc. Tests"

suite "Test function calls" [
    test "single param" [
        assert -> valid?.email ["drkameleon@gmail.com", "yaniszaf@gmail.com"]
        assert -> valid?.url ["https://www.google.com", "https://arturo-lang.io"]
        assert -> not? valid?.email ["drkameleon", "yaniszaf"]
        assert -> not? valid?.email ["drkameleon@gmail.com", "yaniszaf"]
        assert -> not? valid?.url ["google", "arturolang"]
        assert -> not? valid?.url ["https://www.google.com", "arturolang"]
    ]

    test "multiple params" [
        assert -> valid?.email ["drkameleon@gmail.com", "yaniszaf@gmail.com"]
        assert -> valid?.url ["https://www.google.com", "https://arturo-lang.io"]
        assert -> not? valid?.email ["drkameleon", "yaniszaf"]
        assert -> not? valid?.email ["drkameleon@gmail.com", "yaniszaf"]
        assert -> not? valid?.url ["google", "arturolang"]
        assert -> not? valid?.url ["https://www.google.com", "arturolang"]
    ]
]

print subHeader "Test validators"

loop _validators [name, validator][
    params: #[]

    loop validator\params [nm,prm][
        params\[nm]: prm\1
    ]

    run: [
        passedParams: new params
        val: new v
        if block? v [
            val: new v\0
            loop v\1 [nm,prm][
                passedParams\[nm]: do @[prm]
            ]
        ]
        do [validator\action val passedParams]
    ]
    
    suite color.bold #cyan capitalize name [
        tests: validator\test

        valids: @ tests\valid
        test.static ~{all |size valids| positive checks are valid} [
            assert ->
                every? valids 'v run
        ]
        invalids: @ tests\invalid
        test.static ~{all |size invalids| negative checks are invalid} [
            assert ->
                not? some? invalids 'v run
        ]
    ]
]